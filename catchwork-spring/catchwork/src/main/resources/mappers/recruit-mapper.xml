<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.corp.recruit.model.mapper.RecruitMapper">
	
	<!-- 채용공고 작성 -->
	<insert id="writeRecruit" parameterType="Recruit">
	<selectKey resultType="int" keyProperty="recruitNo" order="BEFORE">
    SELECT SEQ_RECRUIT_NO.NEXTVAL FROM DUAL
  </selectKey>
    INSERT INTO RECRUIT (
      RECRUIT_NO,
      RECRUIT_TITLE,
      RECRUIT_START_DATE,
      RECRUIT_END_DATE,
      RECRUIT_JOB_NAME,
      RECRUIT_JOB_DETAIL,
      RECRUIT_EDU,
      RECRUIT_CAREER,
      RECRUIT_HEADCOUNT,
      RECRUIT_TYPE,
      RECRUIT_JOB_AREA,
      RECRUIT_SALARY,
      RECRUIT_RESULT_DATE,
      RECRUIT_DOCX,
      RECRUIT_APPLY,
      RECRUIT_CORP_URL,
      RECRUIT_HIRE_DETAIL,
      RECRUIT_ETC,
      RECRUIT_STATUS,
      RECRUIT_WRITE_DATE,
      MEM_NO
    )
    VALUES (
      #{recruitNo},
      #{recruitTitle},
      #{recruitStartDate},
      #{recruitEndDate},
      #{recruitJobName},
      #{recruitJobDetail},
      #{recruitEdu},
      #{recruitCareer},
      #{recruitHeadcount},
      #{recruitType},
      #{recruitJobArea},
      #{recruitSalary},
      #{recruitResultDate},
      #{recruitDocx},
      #{recruitApply},
      #{recruitCorpUrl},
      #{recruitHireDetail},
      #{recruitEtc},
      0,
      SYSDATE,
      #{memNo}
    )
  </insert>
	
		<!-- 채용공고 상세 -->
		<select id="getRecruitDetail" parameterType="map" resultType="Recruit">
	    SELECT 
	    R.RECRUIT_NO,
	    R.RECRUIT_TITLE,
	    TO_CHAR(R.RECRUIT_START_DATE, 'YYYY-MM-DD') AS RECRUIT_START_DATE,
	    TO_CHAR(R.RECRUIT_END_DATE, 'YYYY-MM-DD') AS RECRUIT_END_DATE,
	    R.RECRUIT_JOB_NAME,
	    R.RECRUIT_JOB_DETAIL,
	    R.RECRUIT_EDU,
	    R.RECRUIT_CAREER,
	    R.RECRUIT_HEADCOUNT,
	    R.RECRUIT_TYPE,
	    R.RECRUIT_JOB_AREA,
	    R.RECRUIT_SALARY,
	    TO_CHAR(R.RECRUIT_RESULT_DATE, 'YYYY-MM-DD') AS RECRUIT_RESULT_DATE,
	    R.RECRUIT_DOCX,
	    R.RECRUIT_APPLY,
	    R.RECRUIT_CORP_URL,
	    R.RECRUIT_HIRE_DETAIL,
	    R.RECRUIT_ETC,
	    R.RECRUIT_READCOUNT,
	    R.RECRUIT_STATUS,
	    TO_CHAR(R.RECRUIT_WRITE_DATE, 'YYYY-MM-DD') AS RECRUIT_WRITE_DATE,
	    R.MEM_NO,
		
		CI.CORP_NO AS corpNo,
	    CI.CORP_LOGO AS corpLogo,
	    CI.CORP_NAME AS corpName,
	    CI.CORP_TYPE AS corpType,
		CI.CORP_BENEFIT AS corpBenefit,
		CI.CORP_BENEFIT_DETAIL AS corpBenefitDetail,
		
		M.MEM_NICKNAME AS memNickname,
		M.MEM_NAME AS memName,
		CM.CORP_MEM_DEPT AS corpMemDept,
		

	
	    NVL(LC.LIKE_COUNT, 0) AS likeCount,
	
	    CASE
	      WHEN EXISTS (
	        SELECT 1 FROM FAV_RECRUIT FR
	        WHERE FR.RECRUIT_NO = R.RECRUIT_NO
	          AND FR.MEM_NO = #{memNo}
	      ) THEN 1 ELSE 0
	    END AS likedByCurrentUser
	
	  FROM RECRUIT R
	  JOIN CORP_MEM CM ON R.MEM_NO = CM.MEM_NO
	  JOIN CORP_INFO CI ON CM.CORP_NO = CI.CORP_NO
	  JOIN MEMBER M ON R.MEM_NO = M.MEM_NO
	  LEFT JOIN (
	    SELECT RECRUIT_NO, COUNT(*) AS LIKE_COUNT
	    FROM FAV_RECRUIT
	    GROUP BY RECRUIT_NO
	  ) LC ON R.RECRUIT_NO = LC.RECRUIT_NO
	  WHERE R.RECRUIT_NO = #{recruitNo}
	  </select>
  
	 <!-- 채용공고 목록 -->
	<select id="selectRecruitList" resultType="Recruit" parameterType="map">
	SELECT
	    R.RECRUIT_NO,
	    R.RECRUIT_TITLE,
	    TO_CHAR(R.RECRUIT_START_DATE, 'YYYY-MM-DD') AS RECRUIT_START_DATE,
	    TO_CHAR(R.RECRUIT_END_DATE, 'YYYY-MM-DD') AS RECRUIT_END_DATE,
	    R.RECRUIT_JOB_NAME,
	    R.RECRUIT_JOB_DETAIL,
	    R.RECRUIT_EDU,
	    R.RECRUIT_CAREER,
	    R.RECRUIT_HEADCOUNT,
	    R.RECRUIT_TYPE,
	    R.RECRUIT_JOB_AREA,
	    R.RECRUIT_SALARY,
	    TO_CHAR(R.RECRUIT_RESULT_DATE, 'YYYY-MM-DD') AS RECRUIT_RESULT_DATE,
	    R.RECRUIT_DOCX,
	    R.RECRUIT_APPLY,
	    R.RECRUIT_CORP_URL,
	    R.RECRUIT_HIRE_DETAIL,
	    R.RECRUIT_ETC,
	    R.RECRUIT_READCOUNT,
	    R.RECRUIT_STATUS,
	    TO_CHAR(R.RECRUIT_WRITE_DATE, 'YYYY-MM-DD') AS RECRUIT_WRITE_DATE,
	    R.MEM_NO,
	    
	    -- 기업 정보
	    CI.CORP_NAME,
	    CI.CORP_TYPE,
	    CI.CORP_LOGO,
		  CI.CORP_BENEFIT,
		  CI.CORP_BENEFIT_DETAIL,
		
	  	-- 기업회원 정보
		  M.MEM_NICKNAME AS memNickname,
		  M.MEM_NAME AS memName,
		  CM.CORP_MEM_ROLE_CHECK AS corpMemRoleCheck,
	    
	    -- 좋아요 수
	    (SELECT COUNT(*) FROM FAV_RECRUIT F WHERE F.RECRUIT_NO = R.RECRUIT_NO) AS likeCount,
	    
	    -- 로그인 유저의 좋아요 여부
	    (SELECT COUNT(*)
	    FROM FAV_RECRUIT F
	    WHERE F.RECRUIT_NO = R.RECRUIT_NO
	    AND F.MEM_NO = #{memNo}) AS likedByCurrentUser
	
			FROM RECRUIT R
			JOIN CORP_MEM CM ON R.MEM_NO = CM.MEM_NO
			JOIN CORP_INFO CI ON CM.CORP_NO = CI.CORP_NO
			JOIN MEMBER M ON R.MEM_NO = M.MEM_NO
	
	<where>
	  <choose>
	  
	    <!-- 채용중: 아직 마감되지 않은 상태 -->
	    <when test="status == 'open'">
	      R.RECRUIT_STATUS = 0
	      AND TRUNC(R.RECRUIT_END_DATE) <![CDATA[ >= ]]> TRUNC(SYSDATE)
	    </when>
	    
	    <!-- 마감됨: 마감일이 지났거나 상태가 3 -->
	    <when test="status == 'closed'">
	      (R.RECRUIT_STATUS = 3 OR TRUNC(R.RECRUIT_END_DATE) <![CDATA[ < ]]> TRUNC(SYSDATE))
	    </when>
	    
	    <!-- 전체: 마감/진행 중인 것들 -->
	    <otherwise>
	      R.RECRUIT_STATUS IN (0, 3)
	      AND M.MEM_STATUS = 0
	    </otherwise>
	    
	  </choose>
	  
	  <if test="corpNo != null">
  		AND EXISTS (
    	SELECT 1
   		FROM CORP_MEM CM2
   		WHERE CM2.MEM_NO = R.MEM_NO
      AND CM2.CORP_NO = #{corpNo}
 			)
		</if>

	  <if test="writer == 'me' and memNo != null">
	    AND R.MEM_NO = #{memNo}
	  </if>
	
	  <if test="query != null and query != ''">
	    AND (
	      R.RECRUIT_TITLE LIKE CONCAT(CONCAT('%', #{query}), '%')
		    OR R.RECRUIT_JOB_NAME LIKE CONCAT(CONCAT('%', #{query}), '%')
		    OR R.RECRUIT_JOB_DETAIL LIKE CONCAT(CONCAT('%', #{query}), '%')
		    OR R.RECRUIT_JOB_AREA LIKE CONCAT(CONCAT('%', #{query}), '%')
		    OR R.RECRUIT_EDU LIKE CONCAT(CONCAT('%', #{query}), '%')
		    OR R.RECRUIT_CAREER LIKE CONCAT(CONCAT('%', #{query}), '%')
		    OR R.RECRUIT_TYPE LIKE CONCAT(CONCAT('%', #{query}), '%')
		    OR R.RECRUIT_SALARY LIKE CONCAT(CONCAT('%', #{query}), '%')
		    OR R.RECRUIT_RESULT_DATE LIKE CONCAT(CONCAT('%', #{query}), '%')
		    OR R.RECRUIT_DOCX LIKE CONCAT(CONCAT('%', #{query}), '%')
		    OR R.RECRUIT_APPLY LIKE CONCAT(CONCAT('%', #{query}), '%')
		    OR R.RECRUIT_CORP_URL LIKE CONCAT(CONCAT('%', #{query}), '%')
		    OR R.RECRUIT_HIRE_DETAIL LIKE CONCAT(CONCAT('%', #{query}), '%')
		    OR R.RECRUIT_ETC LIKE CONCAT(CONCAT('%', #{query}), '%')
		    OR M.MEM_NICKNAME LIKE CONCAT(CONCAT('%', #{query}), '%')
		    OR M.MEM_NAME LIKE CONCAT(CONCAT('%', #{query}), '%')
		    OR CI.CORP_NAME LIKE CONCAT(CONCAT('%', #{query}), '%')
		    OR CI.CORP_BENEFIT LIKE CONCAT(CONCAT('%', #{query}), '%')
		    OR CI.CORP_BENEFIT_DETAIL LIKE CONCAT(CONCAT('%', #{query}), '%')
	    )
	  </if>
	</where>

	<choose>
	    <when test="sort == 'latest'">
	        ORDER BY R.RECRUIT_WRITE_DATE DESC
	    </when>
	    <when test="sort == 'oldest'">
	        ORDER BY R.RECRUIT_WRITE_DATE ASC
	    </when>
	    <when test="sort == 'views'">
	        ORDER BY R.RECRUIT_READCOUNT DESC
	    </when>
	    <when test="sort == 'likes'">
	        ORDER BY likeCount DESC
	    </when>
	    <otherwise>
	        ORDER BY R.RECRUIT_WRITE_DATE DESC
	    </otherwise>
	</choose>
	
	OFFSET #{offset} ROWS FETCH NEXT #{pageSize} ROWS ONLY
	</select>
	
	<!-- endDate 지나면 자동으로 마감처리 -->
	<update id="autoCloseRecruit">
	  UPDATE RECRUIT
	  SET RECRUIT_STATUS = 3
	  WHERE RECRUIT_STATUS = 0
	    AND TRUNC(RECRUIT_END_DATE) <![CDATA[ < ]]> TRUNC(SYSDATE)
	</update>


	<!-- 좋아요 존재 여부 확인 -->
	<select id="checkRecruitLike" resultType="boolean">
	  SELECT CASE WHEN EXISTS (
	    SELECT 1 FROM FAV_RECRUIT
	    WHERE MEM_NO = #{memNo}
	      AND RECRUIT_NO = #{recruitNo}
	  ) THEN 1 ELSE 0 END
	  FROM DUAL
	</select>

	<!-- 좋아요 등록 -->
	<insert id="insertRecruitLike">
	  INSERT INTO FAV_RECRUIT (MEM_NO, RECRUIT_NO)
	  VALUES (#{memNo}, #{recruitNo})
	</insert>

	<!-- 좋아요 삭제 -->
	<delete id="deleteRecruitLike">
	  DELETE FROM FAV_RECRUIT
	  WHERE MEM_NO = #{memNo}
	    AND RECRUIT_NO = #{recruitNo}
	</delete>

	<!-- 작성자 확인 -->
	<select id="findWriterByRecruitNo" resultType="string">
	  SELECT MEM_NO
	  FROM RECRUIT
	  WHERE RECRUIT_NO = #{recruitNo}
	</select>

	<!-- 채용공고 삭제 (상태 변경) -->
	<update id="deleteRecruit">
	  UPDATE RECRUIT
	  SET RECRUIT_STATUS = 1
	  WHERE RECRUIT_NO = #{recruitNo}
	    AND MEM_NO = #{memNo, jdbcType=VARCHAR}
	</update>
	
	<!-- 공고 마감처리 -->
	<update id="updateRecruitStatusToClosed">
	  UPDATE RECRUIT
	  SET RECRUIT_STATUS = 3
	  WHERE RECRUIT_NO = #{recruitNo}
	</update>
	
	<!-- 채용공고 수정 -->
	<update id="editRecruit" parameterType="Recruit">
	UPDATE RECRUIT
	<set>
			<if test="recruitTitle != null and recruitTitle != ''">
				RECRUIT_TITLE = #{recruitTitle},
			</if>
			<if test="recruitStartDate != null">
				RECRUIT_START_DATE = #{recruitStartDate},
			</if>
			<if test="recruitEndDate != null">
				RECRUIT_END_DATE = #{recruitEndDate},
			</if>
			<if test="recruitJobName != null and recruitJobName != ''">
				RECRUIT_JOB_NAME = #{recruitJobName},
			</if>
			<if test="recruitJobDetail != null and recruitJobDetail != ''">
				RECRUIT_JOB_DETAIL = #{recruitJobDetail},
			</if>
			<if test="recruitEdu != null and recruitEdu != ''">
				RECRUIT_EDU = #{recruitEdu},
			</if>
			<if test="recruitCareer != null and recruitCareer != ''">
				RECRUIT_CAREER = #{recruitCareer},
			</if>
			<if test="recruitHeadcount != null">
				RECRUIT_HEADCOUNT = #{recruitHeadcount},
			</if>
			<if test="recruitType != null and recruitType != ''">
				RECRUIT_TYPE = #{recruitType},
			</if>
			<if test="recruitJobArea != null and recruitJobArea != ''">
				RECRUIT_JOB_AREA = #{recruitJobArea},
			</if>
			<if test="recruitSalary != null and recruitSalary != ''">
				RECRUIT_SALARY = #{recruitSalary},
			</if>
			<if test="recruitResultDate != null">
				RECRUIT_RESULT_DATE = #{recruitResultDate},
			</if>
			<if test="recruitDocx != null and recruitDocx != ''">
				RECRUIT_DOCX = #{recruitDocx},
			</if>
			<if test="recruitApply != null and recruitApply != ''">
				RECRUIT_APPLY = #{recruitApply},
			</if>
			<if test="recruitCorpUrl != null and recruitCorpUrl != ''">
				RECRUIT_CORP_URL = #{recruitCorpUrl},
			</if>
			<if test="recruitHireDetail != null and recruitHireDetail != ''">
				RECRUIT_HIRE_DETAIL = #{recruitHireDetail},
			</if>
			<if test="recruitEtc != null and recruitEtc != ''">
				RECRUIT_ETC = #{recruitEtc},
			</if>
		</set>
	WHERE RECRUIT_NO = #{recruitNo}
	  AND MEM_NO = #{memNo}
	</update>
	
	<!-- 채용공고 조회수 증가 -->
	<update id="recruitReadCount">
    UPDATE RECRUIT
    SET RECRUIT_READCOUNT = RECRUIT_READCOUNT + 1
    WHERE RECRUIT_NO = #{recruitNo}
	</update>
	
	<!-- 채용공고 삭제(스케줄러) -->
	<delete id="removeTargetRecruit">
		DELETE FROM RECRUIT
		WHERE RECRUIT_STATUS = 1
		AND RECRUIT_STATUS_DATE &lt; SYSDATE - #{deleteTargetPeriod} DAY
	</delete>

</mapper>
